doctype html
html
  head
    title MultiView : Hierarchical View
    style(type='text/css').
      body {
      color: #d3d3d3;
      font: 12pt arial;
      background-color: #222222;
      }
      #mynetwork {
      position: absolute;
      margin: auto;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border: 1px solid lightgray;
      background: #ffffff;
      }
      .sdncontrollerdiv{
      position: absolute;
      top: 30px;
      left: 30px;
      width: 240px;
      height: 135px;
      font-size: 18px;
      opacity: 0.7;
      border: 1px solid #bfbfbf;
      background: #f5f5ef;
      }
      .sdncontrollerheaddiv{
      position: relative;
      top: 5px;
      left: 5px;
      width: 230px;
      height: 30px;
      border: 1px solid #999999;
      background: #ff1a66;
      padding: 5px 0;
      text-align: center;
      }
      .sdncontrollerbodydiv{
      position: relative;
      top: 5px;
      left: 5px;
      width: 230px;
      height: 80px;
      border: 1px solid #999999;
      background: #ffffff;
      overflow-y:scroll;
      }
      .controllertable {
      width: 100%;
      background-color: #f1f1c1;
      }
      .controllertable tr:nth-child(even) {
      background-color: #eee;
      }
      .controllertable tr:nth-child(odd) {
      background-color: #fff;
      }
      .controllertable th {
      color: white;
      background-color: black;
      }
    script(src='../bower_components/jquery/dist/jquery.min.js')
    script(type='text/javascript', src='javascripts/vis.js')
    script(type='text/javascript', src='javascripts/boxes.json')
    link(href='stylesheets/vis.css', rel='stylesheet', type='text/css')
    link(type='text/css', rel='stylesheet', href='stylesheets/opentip.css')
    script(type='text/javascript', src='javascripts/opentip-jquery.js')
    script(type='text/javascript').
      var session_username = sessionStorage.getItem('ss_user_name');
      if(session_username === null){
      window.location.replace("http://210.125.84.69:3006/login");
      }
      //var boxes = JSON.parse(data);
      // Receive Active Boxes List
      var boxList         = !{boxList};
      var switchList      = !{switchList};
      var instanceList    = !{instanceList};
      var serviceList     = !{serviceList};
      var ovsBridgeStatus = !{ovsBridgeStatus};
      var controllerList  = !{controllerList};
      var DIR             = 'images/';
      var index=0, boxlevel=1, switchlevel=0, instancelevel=0, servicelevel=0;
      var nodes = null, edges = null, network = null;
      var EDGE_LENGTH_MAIN  = 350, EDGE_LENGTH_SUB = 150;
      var BridgeLinkColor = 'GREEN';
      var LENGTH_SERVER = 150, LENGTH_SUB = 50, WIDTH_SCALE = 2, GREEN = 'green', RED = '#C5000B', ORANGE = 'orange', GRAY = 'gray', BLACK = '#2B1B17';
      // Called when the Visualization API is loaded.
      function draw() {
      // Create a data table with nodes.
      nodes = [];
      // Create a data table with links.
      edges = [];
      //Add network Node
      nodes.push({id: 1, label: '                          Underlay Network                                   ', font: {size: 50, color: '#ffffff'},shape: 'box', color: BridgeNodeColor, level:0, fixed: false, physics:true});
      //Draw the Physical Boxes
      for (var i in boxList)
      {
      index=index+1;
      BoxNodeID = index * 1000;
      if (boxList[i].management_ip_status == 'GREEN')
      {
      nodes.push({id: BoxNodeID, label: boxList[i].box, image: DIR + 'boxgreen.png', shape: 'image', level:boxlevel, fixed: false, physics:false});
      edges.push({from: 1, to: BoxNodeID, length: EDGE_LENGTH_MAIN, width: WIDTH_SCALE * 4, color: boxList[i].data_ip_status, label: '0.71 mbps'});
      console.log(boxList[i].management_ip_status);
      }
      else
      {
      nodes.push({id: BoxNodeID, label: boxList[i].box, image: DIR + 'boxred.png', shape: 'image', level:boxlevel, fixed: false, physics:false});
      edges.push({from: 1, to: BoxNodeID, length: EDGE_LENGTH_MAIN, width: WIDTH_SCALE * 4, color: boxList[i].data_ip_status, label: '0.71 mbps'});
      }
      //Draw the OVS Bridges
      switchNodeID = BoxNodeID;
      for (var j in switchList)
      {
      if (switchList[j].bridge !== 'br-ex')
      {
      var BridgeNodeColor;
      console.log(switchList[j].bridge + ' '+BridgeNodeColor);
      for (var a in ovsBridgeStatus)
      {
      if (ovsBridgeStatus[a].bridge == switchList[j].bridge && ovsBridgeStatus[a].boxID == boxList[i].boxID)
      {
      if (ovsBridgeStatus[a].status == 'ORANGE')
      {
      BridgeLinkColor = 'ORANGE';
      BridgeNodeColor = 'switchorange.png'
      console.log(ovsBridgeStatus[a].boxID + ' '+BridgeLinkColor);
      }
      else if (ovsBridgeStatus[a].status == 'DARKGRAY')
      {
      BridgeLinkColor = 'DARKGRAY';
      BridgeNodeColor = 'switchgray.png'
      console.log(ovsBridgeStatus[a].boxID + ' '+BridgeLinkColor);
      }
      else if (ovsBridgeStatus[a].status == 'GREEN')
      {
      BridgeLinkColor = 'GREEN';
      BridgeNodeColor = 'switchgreen.png'
      console.log(ovsBridgeStatus[a].boxID + ' '+BridgeLinkColor);
      }
      else
      {
      BridgeLinkColor= 'RED';
      BridgeNodeColor = 'switchred.png'
      }
      break;
      }
      }
      switchNodeID = switchNodeID + 1;
      if (switchNodeID != BoxNodeID + 1)
      {
      switchlevel=switchlevel + 1;
      nodes.push({id: switchNodeID, label: switchList[j].bridge, box: boxList[i].boxID, level:switchlevel, image: DIR + BridgeNodeColor, shape: 'image', group: 'desktop', fixed: false, physics:true});
      //nodes.push({id: sswitchNodeID, label: sswitchList[j].bridge, box: sboxList[i].boxID, level:sSwitchLevel, image: ((BridgeNodeColor == 'GREEN') ? DIR + 'switchgreen.png' : DIR + 'switchred.png'), shape: 'image', group: 'desktop', fixed: false, physics:true});
      edges.push({from: switchNodeID-1, to: switchNodeID, length: EDGE_LENGTH_SUB, color: BridgeLinkColor});
      }
      else
      {
      switchlevel = boxlevel + 1;
      nodes.push({id: switchNodeID, label: switchList[j].bridge, box: boxList[i].boxID, level:switchlevel, image: DIR + BridgeNodeColor, shape: 'image', group: 'desktop', fixed: false, physics:true});
      edges.push({from: BoxNodeID, to: switchNodeID, length: EDGE_LENGTH_SUB, color: BridgeLinkColor});
      }
      }
      }
      //Draw the OpenStack Instances
      vmNodeID      = BoxNodeID+100;
      serviceNodeID = BoxNodeID+600;
      instancelevel = switchlevel+1;
      for (var k in instanceList)
      {
      if (boxList[i].boxID == instanceList[k].box)
      {
      vmNodeID = vmNodeID + 1;
      if (instanceList[k].state == 'Running')
      {
      nodes.push({id: vmNodeID, label: instanceList[k].name, box: instanceList[k].box, level:instancelevel, image: DIR + 'vmicongreen.png', shape: 'image', group: 'instance', title: 'Instance Details', fixed: false, physics:true});
      edges.push({from: switchNodeID, to: vmNodeID, length: EDGE_LENGTH_SUB, color: GREEN});
      }
      else
      {
      console.log('TEST');
      nodes.push({id: vmNodeID, label: instanceList[k].name, level:instancelevel, image: DIR + 'vmiconred.png', shape: 'image', group: 'instance', title: 'Instance Details', fixed: false, physics:true});
      edges.push({from: switchNodeID, to: vmNodeID, length: EDGE_LENGTH_SUB, color: GREEN});
      }
      //Draw the Services Running in the OpenStack Instance
      //serviceNodeID = serviceNodeID+1;
      //nodes.push({id: serviceNodeID, label: 'Streaming', level:switchlevel+2, group: 'desktop', value: 3, fixed: false, physics:false});
      //edges.push({from: vmNodeID, to: serviceNodeID, length: EDGE_LENGTH_SUB, color: GREEN});
      }
      }
      }
      //Generate HTML for Controllers
      var rows='';
      for( var controller in controllerList )
      {
      var color = controllerList[controller].controllerStatus;
      rows += '<tr><td style=color:'+color+';>'+controllerList[controller].controllerName+'</td></tr>';
      console.log(rows);
      }
      document.getElementById( 'controllertable' ).innerHTML = rows;
      var mynetwork = document.getElementById('mynetwork');
      var x = - mynetwork.clientWidth / 2 + 50;
      var y = - mynetwork.clientHeight / 2 + 50;
      var step = 70;
      // create a visualization network
      var container = document.getElementById('mynetwork');
      var data = {
      nodes: nodes,
      edges: edges
      };
      var options = {
      nodes: {
      //shape: 'dot',
      size: 20,
      borderWidth: 2,
      font: {
      size: 16,
      color: '#000000'
      },
      scaling: {
      min: 16,
      max: 32,
      }
      },
      edges: {
      color: GRAY,
      smooth: false,
      width: 2
      },
      layout: {
      hierarchical: {
      enabled:true,
      levelSeparation: 150,
      nodeSpacing: 240,
      direction: "DU",
      }
      },
      physics:{
      barnesHut:{gravitationalConstant:-30000},
      stabilization: {iterations:2500}
      },
      interaction: {
      navigationButtons: true,
      hover: true,
      keyboard: true
      },
      groups: {
      'switch': {
      shape: 'triangle',
      color: '#FF9900' // orange
      },
      mobile: {
      shape: 'dot',
      color: "#5A1E5C" // purple
      },
      server: {
      shape: 'square',
      color: "#C5000B" // red
      },
      internet: {
      shape: 'square',
      color: "#109618" // green
      },
      instance: {
      shape: 'square',
      color: "#C5000B" // blue
      },
      workload: {
      shape: 'dot',
      color: "#C5000B" // red
      }
      }
      };
      network = new vis.Network(container, data, options);
      network.on("click", function (params){
      console.log(params);
      params.event = "[original event]";
      if(params.nodes == ""){
      }
      else
      {
      var nodeId = params.nodes;
      for(var i=0; i<nodes.length; i++){
      if(nodes[i].id == nodeId){
      switch (nodes[i].level){
      case 0: //Network
      console.log(nodes[i])
      window.parent.getNetworkFlow(nodes[i]);
      break;
      case 1: //Box
      console.log(nodes[i])
      window.parent.receiveValueBox(nodes[i]);
      break;
      case 2: // brcap
      window.parent.receiveValueBrCapflow(nodes[i]);
      break;
      case 3: // brdev
      break;
      case 4: // brvlan
      break;
      case 5: // brint
      break;
      case 6: // vm
      window.parent.receiveValueVMflow(nodes[i])
      break;
      case 7: // service
      break;
      }
      break;
      }
      }
      }
      });
      var myInput = $("#mynetwork");
      var inputOpentip = new Opentip(myInput, { showOn: null, style: 'glass' });
      var count = 0;
      network.on("hoverNode", function (params){
      params.event = "[original event]";
      var nodeId = params.node;
      for(var i=0; i<nodes.length; i++){
      if(nodes[i].id == nodeId){
      count = i;
      break;
      }
      }
      inputOpentip.setContent("Node label: "+ nodes[count].label +" Id: "+ nodes[count].id);
      inputOpentip.show();
      });
      network.on("blurNode", function (params){
      inputOpentip.hide();
      });
      }
  body(onload='draw()')
    p
    p
    #mynetwork(align='center')
    .sdncontrollerdiv
      .sdncontrollerheaddiv(style='color:white;font-family:verdana;text-align:center;') OverCloud Controllers
      .sdncontrollerbodydiv
        table#controllertable(style='width:100%;color:black;text-align:center;')
          tbody
